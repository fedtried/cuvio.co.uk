<!DOCTYPE html>
<html lang="en">
{% include "head.njk" %}
<body>
  {% include "header.njk" %}
  
  {{ content | safe }}
  
  {% include "footer.njk" %}

  <script>
    // Intersection Observer for animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Observe all elements with fade-in animations
    document.querySelectorAll('.fade-in-up').forEach(el => {
      observer.observe(el);
    });

    // Header scroll effect
    let lastScrollTop = 0;
    window.addEventListener('scroll', () => {
      const header = document.querySelector('header');
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      
      if (scrollTop > 100) {
        header.style.transform = scrollTop > lastScrollTop ? 'translateY(-100%)' : 'translateY(0)';
      } else {
        header.style.transform = 'translateY(0)';
      }
      
      lastScrollTop = scrollTop;
    });

    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });

    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    mobileMenuButton?.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });

    // Close mobile menu when clicking on links
    document.querySelectorAll('#mobile-menu a').forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
      });
    });

    // Hero Carousel functionality
    class HeroCarousel {
      constructor() {
        this.slides = document.querySelectorAll('.carousel-slide');
        this.indicators = document.querySelectorAll('.indicator');
        this.currentSlide = 0;
        this.autoPlayInterval = null;
        this.init();
      }

      init() {
        if (this.slides.length === 0) return;
        
        this.bindEvents();
        this.startAutoPlay();
      }

      bindEvents() {
        // Indicator click events
        this.indicators.forEach((indicator, index) => {
          indicator.addEventListener('click', () => {
            this.goToSlide(index);
          });
        });

        // Pause auto-play on hover
        const carouselContainer = document.querySelector('.hero-carousel-container');
        if (carouselContainer) {
          carouselContainer.addEventListener('mouseenter', () => {
            this.stopAutoPlay();
          });
          
          carouselContainer.addEventListener('mouseleave', () => {
            this.startAutoPlay();
          });
        }
      }

      goToSlide(index) {
        if (index === this.currentSlide) return;

        // Remove active class from current slide and indicator
        this.slides[this.currentSlide].classList.remove('active');
        this.indicators[this.currentSlide].classList.remove('active');

        // Update current slide
        this.currentSlide = index;

        // Add active class to new slide and indicator
        this.slides[this.currentSlide].classList.add('active');
        this.indicators[this.currentSlide].classList.add('active');
      }

      nextSlide() {
        const nextIndex = (this.currentSlide + 1) % this.slides.length;
        this.goToSlide(nextIndex);
      }

      startAutoPlay() {
        this.stopAutoPlay();
        this.autoPlayInterval = setInterval(() => {
          this.nextSlide();
        }, 4000); // Change slide every 4 seconds
      }

      stopAutoPlay() {
        if (this.autoPlayInterval) {
          clearInterval(this.autoPlayInterval);
          this.autoPlayInterval = null;
        }
      }
    }

    // Initialize carousel when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new HeroCarousel();
    });
  </script>
</body>
</html>
